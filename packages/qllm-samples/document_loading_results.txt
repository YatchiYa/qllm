=== Document Loading Test Results ===


=== Document 1 ===
File: /home/jluong/Dev/qllm/packages/qllm-samples/src/prompts/chain_of_tought_leader.yaml
MIME Type: text/yaml
Content Length: 2411
Content:
name: chain_of_tought_leader
version: "1.0"
description: Explore the top insights on a specific topic by thought leaders
author: RaphaÃ«l MANSUY
input_variables:
    Topic:
        type: string
        description: The topic to explore from thought leaders
        place_holder: "SEO Strategies"
    Language:
        type: string
        description: The language of the story
        place_holder: "English"
content: >
    ## Chain of Thought Leaders Prompting - Exploring the Top Insights on {{Topic}}

    ### Step 1: Identify the top books by thought leaders in {{Topic}}

    Could you please help me identify the most influential books written by renowned thought leaders on {{Topic}}? These authors are recognized for their expertise and innovative ideas, providing valuable perspectives that can broaden my understanding of this topic.

    ### Step 2: Provide a comprehensive summary list of the key ideas from each of these books relevant to {{Topic}}

    Now that we have our list of top books on {{Topic}}, could you kindly provide a summary for each book, including the essential insights and takeaways? Each summary should consist of approximately five bullet points that encapsulate the authors' main arguments and their relevance to {{Topic}}.

    ### Step 3: Synthesize the ideas above into actionable insights related to {{Topic}}

    Based on the key ideas from the top books on {{Topic}}, could you help me derive practical insights and applications? These insights should build upon the authors' perspectives, providing a deeper understanding of how they can be implemented or used to address challenges within this topic.

    ### Step 4: Form a cohesive straightforward narrative that integrates these insights into a comprehensive overview of {{Topic}}

    Using the insights derived from the top books on {{Topic}}, create a clear and concise narrative. This narrative should present a well-rounded understanding of {{Topic}}, addressing its key aspects and implications while providing connections between various ideas.

    ### Step 5: Refine the narrative to ensure it is clear and comprehensive

    Lastly, refine the narrative to ensure that all essential insights and perspectives on {{Topic}} are accurately represented. The final summary should be a succinct yet thorough exploration of the topic, providing valuable knowledge and insights for readers.

    YOU MUST WRITE IN {{Language}}.

==================================================

=== Document 2 ===
File: /home/jluong/Dev/qllm/CODE_OF_CONDUCT.md
MIME Type: text/markdown
Content Length: 2244
Content:
# Code of Conduct

## Our Pledge

In the spirit of individual liberty and voluntary association, we pledge to foster an environment of free expression, personal responsibility, and mutual respect within our project community.

## Our Principles

We believe in **capitalism** and **free markets** as the foundation for innovation and progress. This belief extends to the marketplace of ideas within our project community.

## Our Standards

We believe in the power of free markets of ideas and behaviors. As such, we encourage:

1. Open and honest communication
2. Voluntary collaboration
3. Personal accountability
4. Respect for individual rights and property
5. Merit-based recognition and advancement

We discourage:

1. Initiation of force or fraud against others
2. Violation of intellectual property rights
3. Deliberate interference with others' ability to participate in the project
4. Attempts to stifle competition or innovation

## Enforcement

We believe in self-governance and dispute resolution through voluntary means. If conflicts arise:

1. Individuals are encouraged to resolve disputes directly with each other.
2. If direct resolution is not possible, community members may voluntarily seek mediation from project maintainers.
3. In extreme cases where behavior significantly disrupts the project, maintainers reserve the right to remove contributions or restrict access to project resources.

## Scope

This Code of Conduct applies to all project spaces, including but not limited to GitHub repositories, communication channels, and project events. It also applies to external spaces when an individual is representing the project or its community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html, and modified to align with libertarian and capitalist principles.

## Conclusion

We believe that a free and open community, based on voluntary interactions, mutual respect, and free market principles, will naturally foster innovation and productivity. By participating in this project, you agree to uphold these principles and respect the rights of others.
==================================================

=== Document 3 ===
File: /home/jluong/Dev/qllm/packages/qllm-lib/jest.config.js
MIME Type: application/javascript
Content Length: 522
Content:
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest',
  },
  testMatch: ['**/__tests__/**/*.ts?(x)', '**/?(*.)+(spec|test).ts?(x)'],
  testPathIgnorePatterns: [
    '/node_modules/',
    '/dist/',
    '\\.d\\.ts$'
  ],
  collectCoverage: true,
  coverageDirectory: 'coverage',
  coveragePathIgnorePatterns: [
    '/node_modules/',
    '/dist/',
    '\\.d\\.ts$'
  ],
  roots: ['<rootDir>/src']
};
==================================================

=== Document 4 ===
File: /home/jluong/Dev/qllm/packages/qllm-lib/src/utils/document/document-loader.ts
MIME Type: text/typescript
Content Length: 22046
Content:
/**
 * @fileoverview Advanced document loader with support for local files, URLs, and caching.
 * Features include:
 * - Progress tracking
 * - Cancellation support
 * - Automatic retries
 * - Caching
 * - MIME type detection
 * - Format-specific handling
 * - Proxy support
 * - Compression handling
 * 
 * @author QLLM Team
 * @module utils/document/document-loader
 */

import fs from 'fs/promises';
import path from 'path';
import axios, { AxiosRequestConfig, CancelTokenSource } from 'axios';
import { EventEmitter } from 'events';
import os from 'os';
import zlib from 'zlib';
import { promisify } from 'util';
import mime from 'mime-types';
import { URL } from 'url';
import { createHash } from 'crypto'; // New import statement
import { getHandlerForMimeType } from './format-handlers';
import logger from '../logger';
import { DocumentParser, LoadResult } from '../../types/document-types';
import { ParserRegistry, DefaultParserRegistry } from './parsers/parser-registry';
import { ContentValidator,ContentValidationOptions } from './content-validator';


const gunzip = promisify(zlib.gunzip);

/**
 * Configuration options for document loading behavior.
 */
export interface DocumentLoaderOptions {
  /** Size of chunks when reading files (in bytes) */
  chunkSize?: number;
  /** Character encoding for text files */
  encoding?: BufferEncoding;
  /** Request timeout in milliseconds */
  timeout?: number;
  /** Custom HTTP headers for URL requests */
  headers?: Record<string, string>;
  /** Maximum number of retry attempts */
  maxRetries?: number;
  /** Delay between retries in milliseconds */
  retryDelay?: number;
  /** Directory for caching loaded documents */
  cacheDir?: string;
  /** Proxy server configuration (format: "host:port") */
  proxy?: string;
  /** Whether to decompress gzipped content */
  decompress?: boolean;
  /** Whether to use document caching */
  useCache?: boolean;
  maxFileSize?: number;
  validationOptions?: ContentValidationOptions;
}
 

/**
 * Event handlers for document loading progress and status.
 */
export interface DocumentLoaderEvents {
  /** Called with progress percentage (0-1) during loading */
  progress: (progress: number) => void;
  /** Called when document is successfully loaded */
  loaded: (result: LoadResult<Buffer>) => void;
  /** Called when an error occurs during loading */
  error: (error: Error) => void;
  /** Called when a retry attempt is made */
  retry: (attempt: number, maxRetries: number) => void;
}

/**
 * Advanced document loader supporting multiple sources and formats.
 * Extends EventEmitter to provide progress and status updates during loading.
 * 
 * Features:
 * - Local file loading with chunking
 * - URL loading with progress tracking
 * - Automatic retry on failure
 * - Content caching
 * - Format-specific handling
 * - Cancellation support
 * 
 * @example
 * ```typescript
 * // Load a local file
 * const loader = new DocumentLoader('~/documents/report.pdf');
 * loader.on('progress', (progress) => console.log(`${progress * 100}% loaded`));
 * const result = await loader.loadAsBuffer();
 * 
 * // Load from URL with options
 * const urlLoader = new DocumentLoader('https://example.com/doc.pdf', {
 *   timeout: 5000,
 *   useCache: true
 * });
 * const content = await urlLoader.loadAsString();
 * ```
 */
export class DocumentLoader extends EventEmitter {
  /**
   * Input path or URL to load.
   */
  private inputPath: string;

  /**
   * Configuration options for the loader.
   */
  private options: Required<DocumentLoaderOptions>;

  /**
   * Cancel token source for the current load operation.
   */
  private cancelTokenSource: CancelTokenSource | null = null;
  private contentValidator: ContentValidator;

  constructor(inputPath: string, 
    private parserRegistry: ParserRegistry = new DefaultParserRegistry(),
    options: DocumentLoaderOptions = {}) {

    super();
    // Validate input path immediately
    this.validateFilePath(inputPath);
    this.inputPath = inputPath;

    this.options = {
        chunkSize: 1024 * 1024,
        encoding: 'utf-8',
        timeout: 30000, // 30 seconds
        headers: {},
        maxRetries: 3,
        retryDelay: 1000,
        cacheDir: path.join(os.tmpdir(), 'document-loader-cache'),
        proxy: '',
        decompress: true,
        useCache: false,
        maxFileSize: 100 * 1024 * 1024, // 100MB
        validationOptions: {
          maxFileSize: 100 * 1024 * 1024,
          allowedMimeTypes: ['text/plain', 'application/pdf', 'text/typescript','application/octet-stream','application/pdf'],
          validateEncoding: true,
          securityScanEnabled: true
      },
        ...options,
    };

    this.contentValidator = new ContentValidator(this.options.validationOptions);

  }

  /**
   * Expands a file path containing a tilde (~) to the user's home directory.
   * 
   * @param filePath File path to expand.
   * @returns Expanded file path.
   */
  private expandTilde(filePath: string): string {
    if (filePath.startsWith('~/') || filePath === '~') {
      return filePath.replace('~', os.homedir());
    }
    return filePath;
  }

  /**
   * Checks if the input path is a URL.
   * 
   * @param input Input path to check.
   * @returns True if the input path is a URL, false otherwise.
   */
  private isUrl(input: string): boolean {
    return input.startsWith('http://') || input.startsWith('https://');
  }

  /**
   * Checks if the input path is a file URL.
   * 
   * @param input Input path to check.
   * @returns True if the input path is a file URL, false otherwise.
   */
  private isFileUrl(input: string): boolean {
    return input.startsWith('file://');
  }

  /**
   * Converts a file URL to a local file path.
   * 
   * @param fileUrl File URL to convert.
   * @returns Local file path.
   */
  private fileUrlToPath(fileUrl: string): string {
    const url = new URL(fileUrl);
    return decodeURIComponent(url.pathname);
  }

  private validateFilePath(filePath: string): void {
    if (!filePath || typeof filePath !== 'string') {
        throw new Error('File path must be a string');
    }

    // Basic security check to prevent directory traversal
    const normalizedPath = path.normalize(filePath);
    if (normalizedPath.includes('..')) {
        throw new Error('File path cannot contain parent directory references');
    }

    // // Check for suspicious characters
    // const suspiciousChars = /[\0<>:"|?*]/;
    // if (suspiciousChars.test(filePath)) {
    //     throw new Error('File path contains invalid characters');
    // }

    // Check path length
    if (filePath.length > 255) {
        throw new Error('File path exceeds maximum length');
    }
}


  private getParser(filename: string): DocumentParser | undefined {
    return this.parserRegistry.getParser(filename);
}

  private getMimeType(filePath: string): string {
    const ext = path.extname(filePath).toLowerCase();
    // Override MIME type for TypeScript files
    if (ext === '.ts' || ext === '.tsx') {
        return 'text/typescript';
    }
    return mime.lookup(filePath) || 'application/octet-stream';
}

private getRawGitHubUrl(url: string): string {
  try {
      const githubUrl = new URL(url);
      
      // Check if it's a GitHub URL
      if (!githubUrl.hostname.includes('github.com')) {
          throw new Error('Not a GitHub URL');
      }

      // Convert github.com to raw.githubusercontent.com
      // Remove 'blob/' from the path if present
      // Example: https://github.com/user/repo/blob/master/file.txt
      // becomes: https://raw.githubusercontent.com/user/repo/master/file.txt
      const pathParts = githubUrl.pathname.split('/');
      
      // Remove empty strings from path parts
      const filteredParts = pathParts.filter(part => part.length > 0);
      
      // Check if we have enough parts (user, repo, blob/tree, branch, filepath)
      if (filteredParts.length < 5) {
          throw new Error('Invalid GitHub URL format');
      }

      // Remove 'blob' or 'tree' from path
      const blobIndex = filteredParts.findIndex(part => part === 'blob' || part === 'tree');
      if (blobIndex !== -1) {
          filteredParts.splice(blobIndex, 1);
      }

      // Construct raw URL
      return `https://raw.githubusercontent.com/${filteredParts.join('/')}`;
  } catch (error) {
      throw new Error(`Failed to parse GitHub URL: ${error instanceof Error ? error.message : String(error)}`);
  }
}


private async loadFromFile(filePath: string): Promise<LoadResult<Buffer>> {
  try {
      // Initial path processing
      const expandedPath = this.expandTilde(filePath);
      const absolutePath = path.resolve(expandedPath);
      const mimeType = this.getMimeType(absolutePath) || 'application/octet-stream';

      // Validate file existence and accessibility
      try {
          await fs.access(absolutePath, fs.constants.R_OK);
      } catch (error) {
          throw new Error(`File not accessible: ${filePath}`);
      }

      // Check cache if enabled
      if (this.options.useCache) {
          const cachedPath = this.getCachePath(absolutePath);
          if (await this.isCacheValid(absolutePath, cachedPath)) {
              try {
                  const content = await fs.readFile(cachedPath);
                  const parsedContent = await this.parseContent(content, absolutePath);
                  return { content, mimeType, parsedContent };
              } catch (error) {
                  // Cache read failed, continue with normal file loading
                  logger.warn(`Cache read failed for ${filePath}, loading from source`);
              }
          }
      }

      // Get file stats and validate size
      const fileStats = await fs.stat(absolutePath);
      if (fileStats.size > this.options.maxFileSize) {
          throw new Error(
              `File size (${fileStats.size} bytes) exceeds maximum allowed size (${this.options.maxFileSize} bytes)`
          );
      }

      // Load file in chunks with proper resource management
      let fileHandle: fs.FileHandle | undefined;
      try {
          fileHandle = await fs.open(absolutePath, 'r');
          const totalSize = fileStats.size;
          let loadedSize = 0;
          const chunks: Buffer[] = [];

          // Read file in chunks
          while (loadedSize < totalSize) {
              const buffer = Buffer.alloc(Math.min(this.options.chunkSize, totalSize - loadedSize));
              const result = await fileHandle.read(buffer, 0, buffer.length, loadedSize);
              
              if (result.bytesRead <= 0) {
                  break; // End of file or error
              }

              chunks.push(buffer.subarray(0, result.bytesRead));
              loadedSize += result.bytesRead;
              
              // Emit progress
              this.emit('progress', loadedSize / totalSize);

              // Check if operation was cancelled
              if (this.cancelTokenSource?.token.reason) {
                  throw new Error('Operation cancelled by user');
              }
          }

          const content = Buffer.concat(chunks);

          // Validate content size after reading
          if (content.length !== totalSize) {
              throw new Error(`File size mismatch: expected ${totalSize}, got ${content.length}`);
          }

          // Cache content if enabled
          if (this.options.useCache) {
              try {
                  const cachedPath = this.getCachePath(absolutePath);
                  await this.cacheContent(cachedPath, content);
              } catch (error) {
                  // Log cache write failure but continue
                  logger.error(`Failed to cache content for ${filePath}: ${error}`);
              }
          }

          // Parse content using appropriate parser
          const parsedContent = await this.parseContent(content, absolutePath);

          return { content, mimeType, parsedContent };

      } finally {
          // Ensure file handle is always closed
          if (fileHandle) {
              await fileHandle.close().catch(error => {
                  logger.error(`Failed to close file handle for ${filePath}: ${error}`);
              });
          }
      }

  } catch (error) {
      // Transform and rethrow errors with context
      const errorMessage = error instanceof Error ? 
          error.message : 
          `Unknown error: ${String(error)}`;
      
      throw new Error(`Failed to load file ${filePath}: ${errorMessage}`);
  }
}
  

  private async validateContent(buffer: Buffer, filePath: string): Promise<void> {
    try {
        const mimeType = this.getMimeType(filePath);
        await this.contentValidator.validateContent(buffer, mimeType, filePath);
    } catch (error) {
        const errorMessage = error instanceof Error ? 
            error.message : 
            `Content validation failed: ${String(error)}`;
        throw new Error(`Validation error for ${filePath}: ${errorMessage}`);
    }
}


private async parseContent(buffer: Buffer, filePath: string): Promise<string | undefined> {
    const parser = this.getParser(filePath);
    if (!parser) {
        return undefined;
    }

    try {
        await this.validateContent(buffer, this.getMimeType(filePath));
        return await parser.parse(buffer, filePath);
    } catch (error) {
        this.emit('error', new Error(`Parsing error for ${filePath}: ${error}`));
        throw error;
    }
}

  /**
   * Loads a document from a URL.
   * 
   * @param url URL to load.
   * @returns Loaded document content and MIME type.
   */
  private async loadFromUrl(url: string): Promise<LoadResult<Buffer>> {
    let finalUrl = url;
    
    // Convert GitHub URLs to raw content URLs
    if (url.includes('github.com')) {
        try {
            finalUrl = this.getRawGitHubUrl(url);
        } catch (error) {
            logger.warn(`Failed to convert GitHub URL, using original URL: ${error}`);
        }
    }

    if (this.options.useCache) {
      const cachedPath = this.getCachePath(finalUrl);
      if (await this.isCacheValid(finalUrl, cachedPath)) {
        const content = await fs.readFile(cachedPath);
        const mimeType = mime.lookup(finalUrl) || 'application/octet-stream';
        return { content, mimeType };
      }
    }

    for (let attempt = 1; attempt <= this.options.maxRetries; attempt++) {
      try {
        this.cancelTokenSource = axios.CancelToken.source();
        const axiosConfig: AxiosRequestConfig = {
          responseType: 'arraybuffer',
          timeout: this.options.timeout,
          headers: this.options.headers,
          onDownloadProgress: (progressEvent) => {
            if (progressEvent.total) {
              this.emit('progress', progressEvent.loaded / progressEvent.total);
            }
          },
          cancelToken: this.cancelTokenSource.token,
          proxy: this.options.proxy
            ? {
                host: this.options.proxy.split(':')[0],
                port: parseInt(this.options.proxy.split(':')[1], 10),
              }
            : undefined,
        };

        const response = await axios.get(finalUrl, axiosConfig);
        let content = Buffer.from(response.data);

        if (this.options.decompress && response.headers['content-encoding'] === 'gzip') {
          content = await gunzip(content);
        }

        const mimeType = response.headers['content-type'] || 'application/octet-stream';

        if (this.options.useCache) {
          const cachedPath = this.getCachePath(finalUrl);
          await this.cacheContent(cachedPath, content);
        }

        return { content, mimeType };
      } catch (error) {
        if (axios.isCancel(error)) {
          throw new Error('Operation cancelled');
        }
        if (attempt === this.options.maxRetries) {
          throw error;
        }
        this.emit('retry', attempt, this.options.maxRetries);
        await new Promise((resolve) => setTimeout(resolve, this.options.retryDelay));
      }
    }
    throw new Error('Max retries reached');
  }

  /**
   * Gets the cache path for a given input path or URL.
   * 
   * @param key Input path or URL to get the cache path for.
   * @returns Cache path.
   */
  private getCachePath(key: string): string {
    const hash = createHash('md5').update(key).digest('hex');
    return path.join(this.options.cacheDir, hash);
  }

  /**
   * Checks if the cache is valid for a given input path or URL.
   * 
   * @param original Original input path or URL.
   * @param cached Cached path to check.
   * @returns True if the cache is valid, false otherwise.
   */
  private async isCacheValid(original: string, cached: string): Promise<boolean> {
    try {
      const [originalStat, cachedStat] = await Promise.all([fs.stat(original), fs.stat(cached)]);
      return cachedStat.mtime > originalStat.mtime;
    } catch {
      return false;
    }
  }

  /**
   * Caches the content of a loaded document.
   * 
   * @param cachedPath Cached path to write to.
   * @param content Document content to cache.
   */
  private async cacheContent(cachedPath: string, content: Buffer): Promise<void> {
    await fs.mkdir(path.dirname(cachedPath), { recursive: true });
    await fs.writeFile(cachedPath, content);
  }

  /**
   * Loads a document as a string.
   * 
   * @returns Loaded document content and MIME type.
   */
  public async loadAsString(): Promise<LoadResult<string>> {
    const { content: buffer, mimeType } = await this.loadAsBuffer();
    try {
      const handler = getHandlerForMimeType(mimeType);
      let content: string;
      
      if (handler) {
        content = await handler.handle(buffer);
      } else {
        // Fallback to basic text conversion
        logger.warn(`No handler found for mime type ${mimeType}, falling back to basic text conversion`);
        content = buffer.toString(this.options.encoding);
      }
  
      // Add parsing step
      const parsedContent = await this.parseContent(buffer, this.inputPath);
  
      return {
        content,
        mimeType,
        parsedContent
      };
    } catch (error) {
      throw new Error(
        `Failed to process file (${mimeType}): ${
          error instanceof Error ? error.message : String(error)
        }`
      );
    }
  }

  /**
   * Loads a document as a buffer.
   * 
   * @returns Loaded document content and MIME type.
   */
  public async loadAsBuffer(): Promise<LoadResult<Buffer>> {
    try {
      let result: LoadResult<Buffer>;
      
      if (this.isUrl(this.inputPath)) {
        result = await this.loadFromUrl(this.inputPath);
      } else if (this.isFileUrl(this.inputPath)) {
        const filePath = this.fileUrlToPath(this.inputPath);
        result = await this.loadFromFile(filePath);
      } else {
        result = await this.loadFromFile(this.inputPath);
      }
  
      // Add parsing step
      const parsedContent = await this.parseContent(result.content, this.inputPath);
      result.parsedContent = parsedContent;
  
      this.emit('loaded', result);
      return result;
    } catch (error) {
      const typedError = error instanceof Error ? error : new Error(String(error));
      this.emit('error', typedError);
      throw typedError;
    }
  }

  /**
   * Cancels the current load operation.
   */
  public cancel(): void {
    if (this.cancelTokenSource) {
      this.cancelTokenSource.cancel('Operation cancelled by user');
    }
  }

  /**
   * Quickly loads a document as a string.
   * 
   * @param input Input path or URL to load.
   * @param options Configuration options for the loader.
   * @returns Loaded document content and MIME type.
   */
  public static async quickLoadString(
    input: string,
    options?: DocumentLoaderOptions,
  ): Promise<LoadResult<string>> {
    
    const defaultRegistry = new DefaultParserRegistry();
    const loader = new DocumentLoader(input, defaultRegistry,options);
    return loader.loadAsString();
  }

  /**
   * Quickly loads a document as a buffer.
   * 
   * @param input Input path or URL to load.
   * @param options Configuration options for the loader.
   * @returns Loaded document content and MIME type.
   */
  public static async quickLoadBuffer(
    input: string,
    options?: DocumentLoaderOptions,
  ): Promise<LoadResult<Buffer>> {
    const defaultRegistry = new DefaultParserRegistry();
    const loader = new DocumentLoader(input, defaultRegistry,options);
    return loader.loadAsBuffer();
  }

  /**
   * Loads multiple documents as strings.
   * 
   * @param inputs Input paths or URLs to load.
   * @param options Configuration options for the loader.
   * @returns Loaded document contents and MIME types.
   */
  public static async loadMultipleAsString(
    inputs: string[],
    options?: DocumentLoaderOptions,
  ): Promise<LoadResult<string>[]> {
    const defaultRegistry = new DefaultParserRegistry();
    const loaders = inputs.map((input) => new DocumentLoader(input,defaultRegistry, options));
    return Promise.all(loaders.map((loader) => loader.loadAsString()));
  }

  /**
   * Loads multiple documents as buffers.
   * 
   * @param inputs Input paths or URLs to load.
   * @param options Configuration options for the loader.
   * @returns Loaded document contents and MIME types.
   */
  public static async loadMultipleAsBuffer(
    inputs: string[],
    options?: DocumentLoaderOptions,
  ): Promise<LoadResult<Buffer>[]> {
    const defaultRegistry = new DefaultParserRegistry();
    const loaders = inputs.map((input) => new DocumentLoader(input,defaultRegistry, options));
    return Promise.all(loaders.map((loader) => loader.loadAsBuffer()));
  }

  /**
   * Type-safe event emitter methods.
   */
  public on<K extends keyof DocumentLoaderEvents>(
    event: K,
    listener: DocumentLoaderEvents[K],
  ): this {
    return super.on(event, listener);
  }

  public emit<K extends keyof DocumentLoaderEvents>(
    event: K,
    ...args: Parameters<DocumentLoaderEvents[K]>
  ): boolean {
    return super.emit(event, ...args);
  }
  
}

==================================================

=== Document 5 ===
File: /home/jluong/Dev/qllm/packages/qllm-samples/package.json
MIME Type: application/json
Content Length: 2956
Content:
{
    "name": "qllm-samples",
    "version": "1.0.5",
    "description": "QLLM Samples",
    "keywords": [
        "ai",
        "llm",
        "qllm",
        "library",
        "typescript",
        "aws-sdk"
    ],
    "type": "commonjs",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "files": [
        "dist",
        "package.json"
    ],
    "bin": {
        "qllm": "./dist/index.js"
    },
    "scripts": {
        "build:ts": "tsc",
        "build": "pnpm run build:ts",
        "clean": "rimraf dist tsconfig.tsbuildinfo",
        "lint": "eslint .",
        "format": "prettier --write .",
        "test": "jest",
        "prepublishOnly": "pnpm run build",
        "start:exm": "ts-node src/template-workflow/ai_research_workflow.ts",
        "test:parsing": "ts-node src/utilities/demo-document-loader-multiplesFiles.ts",
        "parseLocal": "ts-node src/utilities/demo-document-loader-local.ts",
        "parseRemote": "ts-node src/utilities/demo-document-loader-remote.ts"
    },
    "repository": {
        "type": "git",
        "url": "git+https://github.com/quantalogic/qllm.git"
    },
    "bugs": {
        "url": "https://github.com/quantalogic/qllm/issues"
    },
    "homepage": "https://github.com/quantalogic/qllm#readme",
    "author": {
        "name": "QuantaLogic",
        "url": "https://quantalogic.com"
    },
    "license": "Apache-2.0",
    "devDependencies": {
        "@rollup/plugin-commonjs": "26.0.1",
        "@rollup/plugin-json": "6.1.0",
        "@rollup/plugin-node-resolve": "15.2.3",
        "@rollup/plugin-typescript": "11.1.6",
        "@types/copy-paste": "^1.1.33",
        "@types/html-to-text": "9.0.4",
        "@types/jest": "^29.5.12",
        "@types/mime-types": "^2.1.4",
        "@types/node": "^22.5.1",
        "@types/prompts": "^2.4.9",
        "@types/screenshot-desktop": "^1.12.3",
        "@types/uuid": "^10.0.0",
        "@typescript-eslint/eslint-plugin": "^8.15.0",
        "@typescript-eslint/parser": "^8.15.0",
        "eslint": "^9.15.0",
        "jest": "^29.7.0",
        "prettier": "^3.3.3",
        "ts-jest": "^29.2.5",
        "ts-node": "^10.9.2",
        "typescript": "^5.6.3"
    },
    "dependencies": {
        "@npmcli/fs": "^3.1.1",
        "cli-table3": "^0.6.5",
        "commander": "^12.1.0",
        "console-table-printer": "^2.12.1",
        "copy-paste": "^1.5.3",
        "docx": "9.0.2",
        "gradient-string": "^2.0.2",
        "html-to-text": "9.0.5",
        "jimp": "^0.22.12",
        "js-yaml": "^4.1.0",
        "kleur": "^4.1.5",
        "lru-cache": "^11.0.0",
        "mammoth": "1.8.0",
        "mime-types": "^2.1.35",
        "nanospinner": "^1.1.0",
        "node-html-parser": "6.1.13",
        "pdf-parse": "1.1.1",
        "pptx-parser": "1.1.7-beta.9",
        "prompts": "^2.4.2",
        "qllm-lib": "workspace:*",
        "readline": "^1.3.0",
        "screenshot-desktop": "^1.15.0",
        "table": "^6.8.2",
        "uuid": "^10.0.0",
        "xlsx": "0.18.5",
        "yaml": "^2.5.0",
        "zod": "^3.23.8"
    },
    "overrides": {
        "glob": "^9.0.0",
        "rimraf": "^5.0.0",
        "@npmcli/move-file": "npm:@npmcli/fs@latest",
        "are-we-there-yet": "latest",
        "gauge": "latest"
    },
    "publishConfig": {
        "access": "public"
    }
}
==================================================

=== Document 6 ===
File: /home/jluong/Downloads/sample.pdf
MIME Type: application/pdf
Content Length: 3101
Content:
Sample PDF
This is a simple PDF file. Fun fun fun.
Lorem  ipsum dolor  sit  amet,  consectetuer  adipiscing  elit.  Phasellus  facilisis  odio  sed  mi. 
Curabitur suscipit. Nullam  vel nisi. Etiam semper ipsum ut lectus.  Proin  aliquam,  erat eget 
pharetra   commodo,  eros  mi  condimentum   quam,  sed  commodo  justo  quam  ut  velit. 
Integer  a  erat.   Cras  laoreet  ligula  cursus  enim.   Aenean   scelerisque  velit  et  tellus. 
Vestibulum  dictum  aliquet  sem.  Nulla  facilisi.  Vestibulum  accumsan  ante  vitae  elit.  Nulla 
erat  dolor,  blandit  in,  rutrum  quis,  semper  pulvinar,  enim.  Nullam   varius  congue  risus. 
Vivamus  sollicitudin,  metus  ut  interdum   eleifend,  nisi  tellus  pellentesque  elit,  tristique 
accumsan  eros  quam   et  risus.  Suspendisse  libero  odio,  mattis  sit  amet,  aliquet  eget, 
hendrerit vel,  nulla. Sed vitae  augue. Aliquam  erat volutpat.  Aliquam feugiat vulputate nisl. 
Suspendisse quis nulla pretium ante  pretium mollis.  Proin  velit ligula,  sagittis at, egestas a, 
pulvinar quis, nisl.
Pellentesque  sit  amet  lectus.  Praesent  pulvinar,  nunc  quis  iaculis  sagittis,  justo  quam 
lobortis  tortor,  sed  vestibulum dui  metus  venenatis  est.  Nunc  cursus  ligula.  Nulla  facilisi. 
Phasellus ullamcorper consectetuer ante. Duis tincidunt, urna id condimentum  luctus, nibh 
ante  vulputate  sapien,  id  sagittis  massa  orci  ut  enim.  Pellentesque  vestibulum   convallis 
sem.  Nulla  consequat  quam ut  nisl.  Nullam  est.  Curabitur  tincidunt  dapibus  lorem.  Proin 
velit  turpis,  scelerisque  sit  amet,  iaculis  nec,  rhoncus  ac,  ipsum.  Phasellus  lorem  arcu, 
feugiat  eu,  gravida  eu,  consequat  molestie,  ipsum.  Nullam  vel  est  ut  ipsum  volutpat 
feugiat. Aenean pellentesque.
In  mauris.  Pellentesque  dui  nisi,  iaculis eu,  rhoncus in,  venenatis  ac,  ante.  Ut odio justo, 
scelerisque  vel,  facilisis  non,  commodo  a,  pede.  Cras nec  massa sit amet  tortor volutpat 
varius.  Donec  lacinia,  neque  a luctus aliquet, pede  massa  imperdiet ante,  at varius lorem 
pede  sed  sapien.  Fusce  erat nibh,  aliquet in,  eleifend  eget,  commodo  eget,  erat.  Fusce 
consectetuer.  Cras  risus tortor,  porttitor  nec,  tristique  sed,  convallis  semper,  eros.  Fusce 
vulputate  ipsum a mauris.  Phasellus mollis.  Curabitur  sed  urna.  Aliquam nec  sapien  non 
nibh  pulvinar  convallis.  Vivamus  facilisis  augue  quis  quam.  Proin  cursus  aliquet  metus. 
Suspendisse  lacinia.  Nulla  at  tellus ac turpis eleifend scelerisque.  Maecenas a pede vitae 
enim commodo interdum. Donec odio. Sed sollicitudin dui vitae justo.
Morbi  elit nunc, facilisis a, mollis a, molestie  at,  lectus.  Suspendisse eget mauris eu  tellus 
molestie  cursus.  Duis  ut  magna   at  justo  dignissim  condimentum.  Cum   sociis  natoque 
penatibus et magnis dis parturient montes,  nascetur ridiculus mus.  Vivamus varius.  Ut sit 
amet  diam  suscipit  mauris  ornare  aliquam.  Sed  varius.  Duis  arcu.  Etiam tristique  massa 
eget dui.  Phasellus congue.  Aenean  est erat,  tincidunt eget,  venenatis quis,  commodo at, 
quam.
==================================================

=== Document 7 ===
File: /home/jluong/Downloads/sample-local-pdf.pdf
MIME Type: application/pdf
Content Length: 9442
Content:
1	
Sample PDF 
 
Created for testing PDFObject 
 
This PDF is three pages long. Three long pages. Or three short pages if 
youâre optimistic. Is it the same as saying âthree long minutesâ, knowing 
that all minutes are the same duration, and one cannot possibly be longer 
than the other? If these pages are all the same size, can one possibly be 
longer than the other? 
 
I digress. Hereâs some Latin. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec 
odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum 
imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed augue semper porta. Mauris 
massa.  Vestibulum  lacinia  arcu  eget  nulla.  Class  aptent  taciti  sociosqu  ad  litora  torquent  per 
conubia nostra, per inceptos himenaeos. Curabitur sodales ligula in libero.  
 
Sed dignissim lacinia nunc. Curabitur tortor. Pellentesque nibh. Aenean quam. In scelerisque sem 
at dolor. Maecenas mattis. Sed convallis tristique sem. Proin ut ligula vel nunc egestas porttitor. 
Morbi lectus risus, iaculis vel, suscipit quis, luctus non, massa. Fusce ac turpis quis ligula lacinia 
aliquet. Mauris ipsum. Nulla metus metus, ullamcorper vel, tincidunt sed, euismod in, nibh.  
 
Quisque volutpat condimentum velit. Class aptent taciti sociosqu ad litora torquent per conubia 
nostra, per inceptos himenaeos. Nam nec ante. Sed lacinia, urna non tincidunt mattis, tortor neque 
adipiscing diam, a cursus ipsum ante quis turpis. Nulla facilisi. Ut fringilla. Suspendisse potenti. 
Nunc feugiat mi a tellus consequat imperdiet. Vestibulum sapien. Proin quam. Etiam ultrices.  
 
Suspendisse in justo eu magna luctus suscipit. Sed lectus. Integer euismod lacus luctus magna. 
Quisque cursus, metus vitae pharetra auctor, sem massa mattis sem, at interdum magna augue 
eget diam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; 
Morbi lacinia molestie dui. Praesent blandit dolor. Sed non quam. In vel mi sit amet augue congue 
elementum. Morbi in ipsum sit amet pede facilisis laoreet. Donec lacus nunc, viverra nec, blandit 
vel, egestas et, augue. Vestibulum tincidunt malesuada tellus. Ut ultrices ultrices enim. Curabitur 
sit amet mauris.  
 
Morbi in dui quis est pulvinar ullamcorper. Nulla facilisi. Integer lacinia sollicitudin massa. Cras 
metus. Sed aliquet risus a tortor. Integer id quam. Morbi mi. Quisque nisl felis, venenatis tristique, 
dignissim in, ultrices sit amet, augue. Proin sodales libero eget ante. Nulla quam. Aenean laoreet. 
Vestibulum  nisi  lectus,  commodo  ac,  facilisis  ac,  ultricies  eu,  pede.  Ut  orci  risus,  accumsan 
porttitor, cursus quis, aliquet eget, justo. Sed pretium blandit orci.  
 
Ut eu diam at pede suscipit sodales. Aenean lectus elit, fermentum non, convallis id, sagittis at, 
neque.  Nullam  mauris  orci,  aliquet  et,  iaculis  et,  viverra  vitae,  ligula.  Nulla  ut  felis  in  purus 
aliquam imperdiet. Maecenas aliquet mollis lectus. Vivamus consectetuer risus et tortor. Lorem

	2	
ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante 
dapibus  diam.  Sed  nisi.  Nulla  quis  sem  at  nibh  elementum  imperdiet.  Duis  sagittis  ipsum. 
Praesent mauris.  
 
Fusce nec tellus sed augue semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla. Class 
aptent  taciti  sociosqu  ad  litora  torquent  per  conubia  nostra,  per  inceptos  himenaeos.  Curabitur 
sodales ligula in libero. Sed dignissim lacinia nunc. Curabitur tortor. Pellentesque nibh. Aenean 
quam. In scelerisque sem at dolor. Maecenas mattis. Sed convallis tristique sem.  
 
Proin ut ligula vel nunc egestas porttitor. Morbi lectus risus, iaculis vel, suscipit quis, luctus non, 
massa. Fusce ac turpis quis ligula lacinia aliquet. Mauris ipsum. Nulla metus metus, ullamcorper 
vel,  tincidunt  sed,  euismod  in,  nibh.  Quisque  volutpat  condimentum  velit.  Class  aptent  taciti 
sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nam nec ante. Sed lacinia, 
urna non tincidunt mattis, tortor neque adipiscing diam, a cursus ipsum ante quis turpis. Nulla 
facilisi. Ut fringilla. Suspendisse potenti.  
 
Nunc  feugiat  mi  a  tellus  consequat  imperdiet.  Vestibulum  sapien.  Proin  quam.  Etiam  ultrices. 
Suspendisse in justo eu magna luctus suscipit. Sed lectus. Integer euismod lacus luctus magna. 
Quisque cursus, metus vitae pharetra auctor, sem massa mattis sem, at interdum magna augue 
eget diam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; 
Morbi lacinia molestie dui. Praesent blandit dolor. Sed non quam. In vel mi sit amet augue congue 
elementum. Morbi in ipsum sit amet pede facilisis laoreet.  
 
Donec  lacus  nunc,  viverra  nec,  blandit  vel,  egestas  et,  augue.  Vestibulum  tincidunt  malesuada 
tellus.  Ut  ultrices  ultrices  enim.  Curabitur  sit  amet  mauris.  Morbi  in  dui  quis  est  pulvinar 
ullamcorper.  Nulla  facilisi.  Integer  lacinia  sollicitudin  massa.  Cras  metus.  Sed  aliquet  risus  a 
tortor. Integer id quam. Morbi mi.  
 
Lorem  ipsum  dolor  sit  amet,  consectetur  adipiscing  elit.  Integer  nec  odio.  Praesent  libero.  Sed 
cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. Duis sagittis 
ipsum.  Praesent  mauris.  Fusce  nec  tellus  sed  augue  semper  porta.  Mauris  massa.  Vestibulum 
lacinia  arcu  eget  nulla.  Class  aptent  taciti  sociosqu  ad  litora  torquent  per  conubia  nostra,  per 
inceptos himenaeos. Curabitur sodales ligula in libero.  
 
Sed dignissim lacinia nunc. Curabitur tortor. Pellentesque nibh. Aenean quam. In scelerisque sem 
at dolor. Maecenas mattis. Sed convallis tristique sem. Proin ut ligula vel nunc egestas porttitor. 
Morbi lectus risus, iaculis vel, suscipit quis, luctus non, massa. Fusce ac turpis quis ligula lacinia 
aliquet. Mauris ipsum. Nulla metus metus, ullamcorper vel, tincidunt sed, euismod in, nibh.  
 
Quisque volutpat condimentum velit. Class aptent taciti sociosqu ad litora torquent per conubia 
nostra, per inceptos himenaeos. Nam nec ante. Sed lacinia, urna non tincidunt mattis, tortor neque 
adipiscing diam, a cursus ipsum ante quis turpis. Nulla facilisi. Ut fringilla. Suspendisse potenti. 
Nunc feugiat mi a tellus consequat imperdiet. Vestibulum sapien. Proin quam. Etiam ultrices.  
 
Suspendisse in justo eu magna luctus suscipit. Sed lectus. Integer euismod lacus luctus magna. 
Quisque cursus, metus vitae pharetra auctor, sem massa mattis sem, at interdum magna augue 
eget diam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; 
Morbi lacinia molestie dui. Praesent blandit dolor. Sed non quam. In vel mi sit amet augue congue

	3	
elementum. Morbi in ipsum sit amet pede facilisis laoreet. Donec lacus nunc, viverra nec, blandit 
vel, egestas et, augue. Vestibulum tincidunt malesuada tellus. Ut ultrices ultrices enim. Curabitur 
sit amet mauris.  
 
Morbi in dui quis est pulvinar ullamcorper. Nulla facilisi. Integer lacinia sollicitudin massa. Cras 
metus. Sed aliquet risus a tortor. Integer id quam. Morbi mi. Quisque nisl felis, venenatis tristique, 
dignissim in, ultrices sit amet, augue. Proin sodales libero eget ante. Nulla quam. Aenean laoreet. 
Vestibulum  nisi  lectus,  commodo  ac,  facilisis  ac,  ultricies  eu,  pede.  Ut  orci  risus,  accumsan 
porttitor, cursus quis, aliquet eget, justo. Sed pretium blandit orci.  
 
Ut eu diam at pede suscipit sodales. Aenean lectus elit, fermentum non, convallis id, sagittis at, 
neque.  Nullam  mauris  orci,  aliquet  et,  iaculis  et,  viverra  vitae,  ligula.  Nulla  ut  felis  in  purus 
aliquam imperdiet. Maecenas aliquet mollis lectus. Vivamus consectetuer risus et tortor. Lorem 
ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante 
dapibus  diam.  Sed  nisi.  Nulla  quis  sem  at  nibh  elementum  imperdiet.  Duis  sagittis  ipsum. 
Praesent mauris.  
 
Fusce nec tellus sed augue semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla. Class 
aptent  taciti  sociosqu  ad  litora  torquent  per  conubia  nostra,  per  inceptos  himenaeos.  Curabitur 
sodales ligula in libero. Sed dignissim lacinia nunc. Curabitur tortor. Pellentesque nibh. Aenean 
quam. In scelerisque sem at dolor. Maecenas mattis. Sed convallis tristique sem.  
 
Proin ut ligula vel nunc egestas porttitor. Morbi lectus risus, iaculis vel, suscipit quis, luctus non, 
massa. Fusce ac turpis quis ligula lacinia aliquet. Mauris ipsum. Nulla metus metus, ullamcorper 
vel,  tincidunt  sed,  euismod  in,  nibh.  Quisque  volutpat  condimentum  velit.  Class  aptent  taciti 
sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nam nec ante. Sed lacinia, 
urna non tincidunt mattis, tortor neque adipiscing diam, a cursus ipsum ante quis turpis. Nulla 
facilisi. Ut fringilla. Suspendisse potenti.  
 
Nunc  feugiat  mi  a  tellus  consequat  imperdiet.  Vestibulum  sapien.  Proin  quam.  Etiam  ultrices. 
Suspendisse in justo eu magna luctus suscipit. Sed lectus. Integer euismod lacus luctus magna. 
Quisque cursus, metus vitae pharetra auctor, sem massa mattis sem, at interdum magna augue 
eget diam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; 
Morbi lacinia molestie dui. Praesent blandit dolor. Sed non quam. In vel mi sit amet augue congue 
elementum. Morbi in ipsum sit amet pede facilisis laoreet.
==================================================

=== Document 8 ===
File: https://github.com/raphaelmansuy/code2prompt/blob/master/README.md
MIME Type: text/plain; charset=utf-8
Content Length: 25842
Content:
# Code2Prompt

[![PyPI version](https://badge.fury.io/py/code2prompt.svg)](https://badge.fury.io/py/code2prompt)

[![GitHub Stars](https://img.shields.io/github/stars/raphaelmansuy/code2prompt.svg)](https://github.com/raphaelmansuy/code2prompt/stargazers)
[![GitHub Forks](https://img.shields.io/github/forks/raphaelmansuy/code2prompt.svg)](https://github.com/raphaelmansuy/code2prompt/network/members)
[![PyPI downloads](https://img.shields.io/pypi/dm/qllm.svg)](https://pypi.org/project/code2prompt/)
[![PyPI version](https://img.shields.io/pypi/v/qllm.svg)](https://pypi.org/project/code2prompt/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

Code2Prompt is a powerful command-line tool that generates comprehensive prompts from codebases, designed to streamline interactions between developers and Large Language Models (LLMs) for code analysis, documentation, and improvement tasks.

## Table of Contents

1. [Why Code2Prompt?](#why-code2prompt)
2. [Features](#features)
3. [Installation](#installation)
4. [Getting Started](#getting-started)
5. [Quick Start](#quick-start)
6. [Usage](#usage)
7. [Options](#options)
8. [Examples](#examples)
9. [Templating System](#templating-system)
10. [Integration with LLM CLI](#integration-with-llm-cli)
11. [GitHub Actions Integration](#github-actions-integration)
12. [Configuration File](#configuration-file)
13. [Troubleshooting](#troubleshooting)
14. [Contributing](#contributing)
15. [License](#license)

# Code2Prompt: Transform Your Codebase into AI-Ready Prompts

[![PyPI version](https://badge.fury.io/py/code2prompt.svg)](https://badge.fury.io/py/code2prompt)
[![GitHub Stars](https://img.shields.io/github/stars/raphaelmansuy/code2prompt.svg)](https://github.com/raphaelmansuy/code2prompt/stargazers)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

![](./docs/screen-example1.png)

## Supercharge Your AI-Assisted Development

Code2Prompt is a powerful, open-source command-line tool that bridges the gap between your codebase and Large Language Models (LLMs). By converting your entire project into a comprehensive, AI-friendly prompt, Code2Prompt enables you to leverage the full potential of AI for code analysis, documentation, and improvement tasks.

### ð Key Features

- **Holistic Codebase Representation**: Generate a well-structured Markdown prompt that captures your entire project's essence, making it easier for LLMs to understand the context.
- **Intelligent Source Tree Generation**: Create a clear, hierarchical view of your codebase structure, allowing for better navigation and understanding of the project.
- **Customizable Prompt Templates**: Tailor your output using Jinja2 templates to suit specific AI tasks, enhancing the relevance of generated prompts.
- **Smart Token Management**: Count and optimize tokens to ensure compatibility with various LLM token limits, preventing errors during processing.
- **Gitignore Integration**: Respect your project's .gitignore rules for accurate representation, ensuring that irrelevant files are excluded from processing.
- **Flexible File Handling**: Filter and exclude files using powerful glob patterns, giving you control over which files are included in the prompt generation.
- **Custom Syntax Highlighting**: Pair custom file extensions with specific syntax highlighting using the `--syntax-map` option. For example, you can specify that `.inc` files should be treated as `bash` scripts.
- **Clipboard Ready**: Instantly copy generated prompts to your clipboard for quick AI interactions, streamlining your workflow.
- **Multiple Output Options**: Save to file or display in the console, providing flexibility in how you want to use the generated prompts.
- **Enhanced Code Readability**: Add line numbers to source code blocks for precise referencing, making it easier to discuss specific parts of the code.
- **Include file**: Support of template import, allowing for modular template design.
- **Input variables**: Support of Input Variables in templates, enabling dynamic prompt generation based on user input.

### ð¡ Why Code2Prompt?

- **Contextual Understanding**: Provide LLMs with a comprehensive view of your project for more accurate suggestions and analysis.
- **Consistency Boost**: Maintain coding style and conventions across your entire project, improving code quality.
- **Efficient Refactoring**: Enable better interdependency analysis and smarter refactoring recommendations, saving time and effort.
- **Improved Documentation**: Generate contextually relevant documentation that truly reflects your codebase, enhancing maintainability.
- **Pattern Recognition**: Help LLMs learn and apply your project-specific patterns and idioms, improving the quality of AI interactions.

Transform the way you interact with AI for software development. With Code2Prompt, harness the full power of your codebase in every AI conversation.

Ready to elevate your AI-assisted development? Let's dive in! ðââï¸

## Installation

Choose one of the following methods to install Code2Prompt:

### Using pip 

```bash
pip install code2prompt
```
### Using [pipx](https://github.com/pypa/pipx) (recommended)

```bash
pipx install code2prompt
```

## Getting Started

To get started with Code2Prompt, follow these steps:

1. **Install Code2Prompt**: Use one of the installation methods mentioned above.
2. **Prepare Your Codebase**: Ensure your project is organized and that you have a `.gitignore` file if necessary.
3. **Run Code2Prompt**: Use the command line to generate prompts from your codebase.

For example, to generate a prompt from a single Python file, run:

```bash
code2prompt --path /path/to/your/script.py
```

## Quick Start

1. Generate a prompt from a single Python file:
   ```bash
   code2prompt --path /path/to/your/script.py
   ```

2. Process an entire project directory and save the output:
   ```bash
   code2prompt --path /path/to/your/project --output project_summary.md
   ```

3. Generate a prompt for multiple files, excluding tests:
   ```bash
   code2prompt --path /path/to/src --path /path/to/lib --exclude "*/tests/*" --output codebase_summary.md
   ```

## Usage

The basic syntax for Code2Prompt is:

```bash
code2prompt --path /path/to/your/code [OPTIONS]
```

For multiple paths:

```bash
code2prompt --path /path/to/dir1 --path /path/to/file2.py [OPTIONS]
```

### Custom Syntax Highlighting

To pair custom file extensions with specific syntax highlighting, use the `--syntax-map` option. This allows you to specify mappings in the format `extension:syntax`. For example:

```
code2prompt --path /path/to/your/code --syntax-map "inc:bash,customext:python,ext2:javascript"
```

This command will treat `.inc` files as `bash` scripts, `.customext` files as `python`, and `.ext2` files as `javascript`.

You can also use multiple `--syntax-map` arguments or separate mappings with commas:

```
code2prompt --path /path/to/your/script.py --syntax-map "inc:bash"
```

```
code2prompt --path /path/to/your/project --syntax-map "inc:bash,txt:markdown" --output project_summary.md
```

```
code2prompt --path /path/to/src --path /path/to/lib --syntax-map "inc:bash,customext:python" --output codebase_summary.md
```

## Options

| Option | Short | Description |
|--------|-------|-------------|
| `--path` | `-p` | Path(s) to the directory or file to process (required, multiple allowed) |
| `--output` | `-o` | Name of the output Markdown file |
| `--gitignore` | `-g` | Path to the .gitignore file |
| `--filter` | `-f` | Comma-separated filter patterns to include files (e.g., "*.py,*.js") |
| `--exclude` | `-e` | Comma-separated patterns to exclude files (e.g., "*.txt,*.md") |
| `--case-sensitive` | | Perform case-sensitive pattern matching |
| `--suppress-comments` | `-s` | Strip comments from the code files |
| `--line-number` | `-ln` | Add line numbers to source code blocks |
| `--no-codeblock` | | Disable wrapping code inside markdown code blocks |
| `--template` | `-t` | Path to a Jinja2 template file for custom prompt generation |
| `--tokens` | | Display the token count of the generated prompt |
| `--encoding` | | Specify the tokenizer encoding to use (default: "cl100k_base") |
| `--create-templates` | | Create a templates directory with example templates |
| `--version` | `-v` | Show the version and exit |
| `--log-level` | | Set the logging level (e.g., DEBUG, INFO, WARNING, ERROR, CRITICAL) |
| `--interactive` | `-i` | Activate interactive mode for file selection |
| `--syntax-map` | | Pair custom file extensions with specific syntax highlighting (e.g., "inc:bash,customext:python,ext2:javascript") |

## Command Parameters

### `--filter` or `-f` and `--exclude` or `-e`

The `--filter` and `--exclude` options allow you to specify patterns for files or directories that should be included in or excluded from processing, respectively.

#### Syntax:
```
--filter "PATTERN1,PATTERN2,..."
--exclude "PATTERN1,PATTERN2,..."
```
or
```
-f "PATTERN1,PATTERN2,..."
-e "PATTERN1,PATTERN2,..."
```

#### Description:
- Both options accept a comma-separated list of patterns.
- Patterns can include wildcards (`*`) and directory indicators (`**`).
- Case-sensitive by default (use `--case-sensitive` flag to change this behavior).
- `--exclude` patterns take precedence over `--filter` patterns.

#### Examples:

1. Include only Python files:
   ```
   --filter "**.py"
   ```

2. Exclude all Markdown files:
   ```
   --exclude "**.md"
   ```

3. Include specific file types in the src directory:
   ```
   --filter "src/**.{js,ts}"
   ```

4. Exclude multiple file types and a specific directory:
   ```
   --exclude "**.log,**.tmp,**/node_modules/**"
   ```

5. Include all files except those in 'test' directories:
   ```
   --filter "**" --exclude "**/test/**"
   ```

6. Complex filtering (include JavaScript files, exclude minified and test files):
   ```
   --filter "**.js" --exclude "**.min.js,**test**.js"
   ```

7. Include specific files across all directories:
   ```
   --filter "**/config.json,**/README.md"
   ```

8. Exclude temporary files and directories:
   ```
   --exclude "**/.cache/**,**/tmp/**,**.tmp"
   ```

9. Include source files but exclude build output:
   ```
   --filter "src/**/*.{js,ts}" --exclude "**/dist/**,**/build/**"
   ```

10. Exclude version control and IDE-specific files:
    ```
    --exclude "**/.git/**,**/.vscode/**,**/.idea/**"
    ```

#### Important Notes:

- Always use double quotes around patterns to prevent shell interpretation of special characters.
- Patterns are matched against the full path of each file, relative to the project root.
- The `**` wildcard matches any number of directories.
- Single `*` matches any characters within a single directory or filename.
- Use commas to separate multiple patterns within the same option.
- Combine `--filter` and `--exclude` for fine-grained control over which files are processed.

#### Best Practices:

1. Start with broader patterns and refine as needed.
2. Test your patterns on a small subset of your project first.
3. Use the `--case-sensitive` flag if you need to distinguish between similarly named files with different cases.
4. When working with complex projects, consider using a configuration file to manage your filter and exclude patterns.

By using the `--filter` and `--exclude` options effectively and safely (with proper quoting), you can precisely control which files are processed in your project, ensuring both accuracy and security in your command execution.

## Examples

1. Generate documentation for a Python library:
   ```bash
   code2prompt --path /path/to/library --output library_docs.md --suppress-comments --line-number --filter "*.py"
   ```

2. Prepare a codebase summary for a code review, focusing on JavaScript and TypeScript files:
   ```bash
   code2prompt --path /path/to/project --filter "*.js,*.ts" --exclude "node_modules/*,dist/*" --template code_review.j2 --output code_review.md
   ```

3. Create input for an AI model to suggest improvements, focusing on a specific directory:
   ```bash
   code2prompt --path /path/to/src/components --suppress-comments --tokens --encoding cl100k_base --output ai_input.md
   ```

4. Analyze comment density across a multi-language project:
   ```bash
   code2prompt --path /path/to/project --template comment_density.j2 --output comment_analysis.md --filter "*.py,*.js,*.java"
   ```

5. Generate a prompt for a specific set of files, adding line numbers:
   ```bash
   code2prompt --path /path/to/important_file1.py --path /path/to/important_file2.js --line-number --output critical_files.md
   ```

## Templating System

Code2Prompt supports custom output formatting using Jinja2 templates. To use a custom template:

```bash
code2prompt --path /path/to/code --template /path/to/your/template.j2
```

### Creating Template Examples

Use the `--create-templates` command to generate example templates:

```bash
code2prompt --create-templates
```

This creates a `templates` directory with sample Jinja2 templates, including:

- [default.j2](./code2prompt//templates/default.j2): A general-purpose template
- [analyze-code.j2](./code2prompt/templates/analyze-code.j2): For detailed code analysis
- [code-review.j2](./code2prompt/templates/code-review.j2): For thorough code reviews
- [create-readme.j2](./code2prompt/templates/create-readme.j2): To assist in generating README files
- [improve-this-prompt.j2](./code2prompt/templates/improve-this-prompt.j2): For refining AI prompts

For full template documentation, see [Documentation Templating](./TEMPLATE.md).

## Integration with LLM CLI

Code2Prompt can be integrated with Simon Willison's [llm](https://github.com/simonw/llm) CLI tool for enhanced code analysis or [qllm](https://github.com/quantalogic/qllm), or for the Rust lovers [hiramu-cli](https://github.com/raphaelmansuy/hiramu-cli). 

### Installation

```bash
pip install code2prompt llm
```

### Basic Usage

1. Generate a code summary and analyze it with an LLM:
   ```bash
   code2prompt --path /path/to/your/project | llm "Analyze this codebase and provide insights on its structure and potential improvements"
   ```

2. Process a specific file and get refactoring suggestions:
   ```bash
   code2prompt --path /path/to/your/script.py | llm "Suggest refactoring improvements for this code"
   ```

For more advanced use cases, refer to the [Integration with LLM CLI](#integration-with-llm-cli) section in the full documentation.

## GitHub Actions Integration

You can integrate Code2Prompt into your GitHub Actions workflow. Here's an example:

```yaml
name: Code Analysis
on: [push]
jobs:
  analyze-code:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        pip install code2prompt llm
    - name: Analyze codebase
      run: |
        code2prompt --path . | llm "Perform a comprehensive analysis of this codebase. Identify areas for improvement, potential bugs, and suggest optimizations." > analysis.md
    - name: Upload analysis
      uses: actions/upload-artifact@v2
      with:
        name: code-analysis
        path: analysis.md
```

## Understanding Tokens and Token Types in Code2Prompt

Tokens are the basic units of text that language models process. They can be words, parts of words, or even punctuation marks. Different tokenizer encodings split text into tokens in various ways. Code2Prompt supports multiple token types through its `--encoding` option, with "cl100k_base" as the default. This encoding, used by models like GPT-3.5 and GPT-4, is adept at handling code and technical content. Other common encodings include "p50k_base" (used by earlier GPT-3 models) and "r50k_base" (used by models like CodeX).

To count tokens in your generated prompt, use the `--tokens` flag:

```bash
code2prompt --path /your/project --tokens
```

For a specific encoding:

```bash
code2prompt --path /your/project --tokens --encoding p50k_base
```

Understanding token counts is crucial when working with AI models that have token limits, ensuring your prompts fit within the model's context window.

### Token Price Estimation

Code2Prompt now includes a powerful feature for estimating token prices across various AI providers and models. Use the `--price` option in conjunction with `--tokens` to display a comprehensive breakdown of estimated costs. This feature calculates prices based on both input and output tokens, with input tokens determined by your codebase and a default of 1000 output tokens (customizable via `--output-tokens`). You can specify a particular provider or model, or view prices across all available options. This functionality helps developers make informed decisions about AI model usage and cost management. For example:

```bash
code2prompt --path /your/project --tokens --price --provider openai --model gpt-4
```

This command will analyze your project, count the tokens, and provide a detailed price estimation for OpenAI's GPT-4 model.

![](./docs/screen-example2.png)

## ð¥ Analyzing Codebases

code2prompt now offers a powerful feature to analyze codebases and provide a summary of file extensions. Use the `--analyze` option along with the `-p` (path) option to get an overview of your project's file composition. For example:

```
code2prompt --analyze -p code2prompt
```

Result:

```
.j2: 6 files
.json: 1 file
.py: 33 files
.pyc: 56 files

Comma-separated list of extensions:
.j2,.json,.py,.pyc
```

This command will analyze the 'code2prompt' directory and display a summary of all file extensions found, including their counts. You can choose between two output formats:

- Flat format (default): Lists all unique extensions alphabetically with their file counts.
- Tree-like format: Displays extensions in a directory tree structure with counts at each level.

To use the tree-like format, add the `--format tree` option:

```
code2prompt --analyze -p code2prompt --format tree
```

Result: 

```
âââ code2prompt
    âââ utils
    â   âââ .py
    â   âââ __pycache__
    â       âââ .pyc
    âââ .py
    âââ core
    â   âââ .py
    â   âââ __pycache__
    â       âââ .pyc
    âââ comment_stripper
    â   âââ .py
    â   âââ __pycache__
    â       âââ .pyc
    âââ __pycache__
    â   ââ .pyc
    âââ templates
    â   âââ .j2
    âââ data
        âââ .json

Comma-separated list of extensions:
.j2,.json,.py,.pyc
```

The analysis also generates a comma-separated list of file extensions, which can be easily copied and used with the `--filter` option for more targeted code processing.

## ð¥ Feature Highlight: Dynamic Variable Extraction for Prompt Generation

`code2prompt` offers a powerful feature for dynamic variable extraction from templates, allowing for interactive and customizable prompt generation. Using the syntax `{{input:variable_name}}`, you can easily define variables that will prompt users for input during execution. 

This is particularly useful for creating flexible templates for various purposes, such as generating AI prompts for Chrome extensions. Here's an example:

```jinja2
# AI Prompt Generator for Chrome Extension

Generate a prompt for an AI to create a Chrome extension with the following specifications:

Extension Name: {{input:extension_name}}
Main Functionality: {{input:main_functionality}}
Target Audience: {{input:target_audience}}

## Prompt:

You are an experienced Chrome extension developer. Create a detailed plan for a Chrome extension named "{{input:extension_name}}" that {{input:main_functionality}}. This extension is designed for {{input:target_audience}}.

Your response should include:

1. A brief description of the extension's purpose and functionality
2. Key features (at least 3)
3. User interface design considerations
4. Potential challenges in development and how to overcome them
5. Security and privacy considerations
6. A basic code structure for the main components (manifest.json, background script, content script, etc.)

Ensure that your plan is detailed, technically sound, and tailored to the needs of {{input:target_audience}}.

Start from this codebase:

---- 

## The codebase:

<codebase>
```

When you run `code2prompt` with this template, it will automatically detect the `{{input:variable_name}}` patterns and prompt the user to provide values for each variable (extension_name, main_functionality, and target_audience). This allows for flexible and interactive prompt generation, making it easy to create customized AI prompts for various Chrome extension ideas.

For example, if a user inputs:
- Extension Name: "ProductivityBoost"
- Main Functionality: "tracks time spent on different websites and provides productivity insights"
- Target Audience: "professionals working from home"

The tool will generate a tailored prompt for an AI to create a detailed plan for this specific Chrome extension. This feature is particularly useful for developers, product managers, or anyone looking to quickly generate customized AI prompts for various projects or ideas.

## ð¥ Feature Highlight "Include File" Feature

The code2prompt project now supports a powerful "include file" feature, enhancing template modularity and reusability.

 This feature allows you to seamlessly incorporate external file content into your main template using the `{% include %}` directive. For example, in the main `analyze-code.j2` template, you can break down complex sections into smaller, manageable files:

```jinja2
# Elite Code Analyzer and Improvement Strategist 2.0

{% include 'sections/role_and_goal.j2' %}

{% include 'sections/core_competencies.j2' %}

## Task Breakdown

1. Initial Assessment
{% include 'tasks/initial_assessment.j2' %}

2. Multi-Dimensional Analysis (Utilize Tree of Thought)
{% include 'tasks/multi_dimensional_analysis.j2' %}

// ... other sections ...
```

This approach allows you to organize your template structure more efficiently, improving maintainability and allowing for easy updates to specific sections without modifying the entire template. The include feature supports both relative and absolute paths, making it flexible for various project structures. By leveraging this feature, you can significantly reduce code duplication, improve template management, and create a more modular and scalable structure for your code2prompt templates.

## Interactive Mode

The interactive mode allows users to select files for processing in a user-friendly manner. This feature is particularly useful when dealing with large codebases or when you want to selectively include files without manually specifying each path.

### How to Use Interactive Mode

To activate interactive mode, use the `--interactive` or `-i` option when running the `code2prompt` command. Here's an example:

```bash
code2prompt --path /path/to/your/project --interactive
```

![](./docs/screen-example3.png)


### Features of Interactive Mode

- **File Selection**: Navigate through the directory structure and select files using keyboard controls.
- **Visual Feedback**: The interface provides visual cues to help you understand which files are selected or ignored.

### Keyboard Controls

- **Arrow Keys**: Navigate through the list of files.
- **Spacebar**: Toggle the selection of a file.
- **Enter**: Confirm your selection and proceed with the command.
- **Esc**: Exit the interactive mode without making any changes.

This mode enhances the usability of Code2Prompt, making it easier to manage file selections in complex projects.

## Configuration File

Code2Prompt supports a `.code2promptrc` configuration file in JSON format for setting default options. Place this file in your project or home directory.

Example `.code2promptrc`:

```json
{
  "suppress_comments": true,
  "line_number": true,
  "encoding": "cl100k_base",
  "filter": "*.py,*.js",
  "exclude": "tests/*,docs/*"
}
```

## Troubleshooting

1. **Issue**: Code2Prompt is not recognizing my .gitignore file.
   **Solution**: Run Code2Prompt from the project root, or specify the .gitignore path with `--gitignore`.

2. **Issue**: The generated output is too large for my AI model.
   **Solution**: Use `--tokens` to check the count, and refine `--filter` or `--exclude` options.

3. **Issue**: Some files are not being processed.
   **Solution**: Check for binary files or exclusion patterns. Use `--case-sensitive` if needed.

## Roadmap

   - [X] Interactive filtering
   - [X] Include system in template to promote re-usability of sub templates.
   - [X] Support of input variables
   - [ ] Tokens count for Anthropic Models and other models such as LLama3 or Mistral
   - [X] Cost Estimations for main LLM providers based on token count
   - [ ] Integration with [qllm](https://github.com/quantalogic/qllm) (Quantalogic LLM)
   - [ ] Embedding of file summary in SQL-Lite
   - [ ] Intelligence selection of file based on an LLM
   - [ ] Git power tools (Git diff integration / PR Assisted Review)

## Contributing

Contributions to Code2Prompt are welcome! Please read our [Contributing Guide](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## License

Code2Prompt is released under the MIT License. See the [LICENSE](LICENSE) file for details.

---

â­ If you find Code2Prompt useful, please give us a star on GitHub! It helps us reach more developers and improve the tool. â­

## Project Growth
[![Star History Chart](https://api.star-history.com/svg?repos=raphaelmansuy/code2prompt&type=Date)](https://star-history.com/#raphaelmansuy/code2prompt&Date)

Made with â¤ï¸ by RaphaÃ«l MANSUY. Founder of [Quantalogic](https://www.quantalogic.app). Creator of [qllm](https://github.com/quantalogic/qllm).

==================================================

=== Document 9 ===
File: https://github.com/raphaelmansuy/code2prompt/blob/master/ruff.toml
MIME Type: text/plain; charset=utf-8
Content Length: 1815
Content:
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

==================================================

=== Document 10 ===
File: https://github.com/raphaelmansuy/code2prompt/blob/master/script/detect_dead_code.sh
MIME Type: text/plain; charset=utf-8
Content Length: 54
Content:

==================================================

=== Document 11 ===
File: https://github.com/jluongg/qllm/blob/feature/local_parser/packages/qllm-lib/src/utils/document/content-validator.ts
MIME Type: text/plain; charset=utf-8
Content Length: 7491
Content:
import { createHash } from 'crypto';
import { promisify } from 'util';
import { lookup } from 'mime-types';
import logger from '../logger';

export interface ContentValidationOptions {
    maxFileSize: number;
    allowedMimeTypes?: string[];
    maxContentLength?: number;
    validateEncoding?: boolean;
    allowExecutables?: boolean;
    securityScanEnabled?: boolean;
}

export class ContentValidator {
    private readonly defaultOptions: Required<ContentValidationOptions> = {
        maxFileSize: 100 * 1024 * 1024, // 100MB
        allowedMimeTypes: [],
        maxContentLength: 50 * 1024 * 1024, // 50MB
        validateEncoding: true,
        allowExecutables: false,
        securityScanEnabled: true
    };

    private readonly options: Required<ContentValidationOptions>;

    constructor(options: ContentValidationOptions) {
        this.options = { ...this.defaultOptions, ...options };
    }

    async validateContent(
        buffer: Buffer,
        expectedMimeType: string,
        filePath: string
    ): Promise<void> {
        try {
            // Size validation
            await this.validateSize(buffer);

            // MIME type validation
            await this.validateMimeType(buffer, expectedMimeType);

            // // Content integrity validation
            // await this.validateIntegrity(buffer, filePath);

            // Security validation
            if (this.options.securityScanEnabled) {
                await this.performSecurityChecks(buffer, filePath);
            }

            // // Encoding validation
            // if (this.options.validateEncoding) {
            //     await this.validateEncoding(buffer);
            // }

        } catch (error) {
            const errorMessage = error instanceof Error ? 
                error.message : 
                `Content validation failed: ${String(error)}`;
            throw new Error(`Validation error for ${filePath}: ${errorMessage}`);
        }
    }

    private async validateSize(buffer: Buffer): Promise<void> {
        const size = buffer.length;
        
        if (size === 0) {
            throw new Error('Content is empty');
        }

        if (size > this.options.maxFileSize) {
            throw new Error(
                `Content size (${size} bytes) exceeds maximum allowed size (${this.options.maxFileSize} bytes)`
            );
        }
    }

    private async validateMimeType(buffer: Buffer, expectedMimeType: string): Promise<void> {
        // Skip validation if no allowed MIME types are specified
        if (this.options.allowedMimeTypes.length === 0) {
            return;
        }

        if (!this.options.allowedMimeTypes.includes(expectedMimeType)) {
            throw new Error(`MIME type ${expectedMimeType} is not allowed`);
        }

        // Validate file signature
        const detectedType = await this.detectContentType(buffer);
        if (detectedType && detectedType !== expectedMimeType) {
            throw new Error(
                `Content type mismatch: expected ${expectedMimeType}, detected ${detectedType}`
            );
        }
    }

    private async validateIntegrity(buffer: Buffer, filePath: string): Promise<void> {
        // Check for file corruption
        if (!this.isValidContent(buffer)) {
            throw new Error('Content appears to be corrupted');
        }

        // Calculate and verify checksum
        const checksum = this.calculateChecksum(buffer);
        if (!checksum) {
            throw new Error('Failed to calculate content checksum');
        }
    }

    private async validateEncoding(buffer: Buffer): Promise<void> {
        try {
            // Attempt to decode as UTF-8
            const content = buffer.toString('utf8');
            if (content.includes('\uFFFD')) {
                throw new Error('Content contains invalid UTF-8 characters');
            }
        } catch (error) {
            throw new Error('Content has invalid encoding');
        }
    }

    private async performSecurityChecks(buffer: Buffer, filePath: string): Promise<void> {
        // Check for executable content
        if (!this.options.allowExecutables && this.isExecutable(buffer)) {
            throw new Error('Executable content is not allowed');
        }

        // Check for malicious patterns
        if (this.containsMaliciousPatterns(buffer)) {
            throw new Error('Potentially malicious content detected');
        }

        // Additional security checks can be added here
        await this.scanForMalware(buffer);
    }

    private isValidContent(buffer: Buffer): boolean {
        // Basic content validation
        if (buffer.length === 0) {
            return false;
        }

        // File signatures validation
        const signatures: Record<string, Buffer> = {
            pdf: Buffer.from('%PDF'),
            png: Buffer.from([0x89, 0x50, 0x4E, 0x47]),
            jpeg: Buffer.from([0xFF, 0xD8, 0xFF]),
            gif: Buffer.from('GIF87a'),
            gif89a: Buffer.from('GIF89a'),
            zip: Buffer.from([0x50, 0x4B, 0x03, 0x04]),
            // Add more signatures as needed
        };

        // Check if content starts with any valid signature
        return Object.values(signatures).some(signature =>
            buffer.slice(0, signature.length).equals(signature)
        );
    }

    private isExecutable(buffer: Buffer): boolean {
        const executableSignatures = [
            Buffer.from('MZ'),  // Windows executables
            Buffer.from([0x7F, 0x45, 0x4C, 0x46]),  // ELF files
            Buffer.from('#!'),  // Shell scripts
        ];

        return executableSignatures.some(signature =>
            buffer.slice(0, signature.length).equals(signature)
        );
    }

    private containsMaliciousPatterns(buffer: Buffer): boolean {
        const maliciousPatterns = [
            /<script\b[^>]*>/i,  // Script tags
            /eval\s*\(/,         // eval() calls
            /document\.cookie/i,  // Cookie manipulation
            /<iframe\b[^>]*>/i,  // iframes
            /javascript:/i,      // javascript: URLs
            /data:/i,            // data: URLs
            /vbscript:/i,        // vbscript: URLs
        ];

        const content = buffer.toString('utf8');
        return maliciousPatterns.some(pattern => pattern.test(content));
    }

    private async detectContentType(buffer: Buffer): Promise<string | undefined> {
        // Implementation depends on your needs
        // You might want to use a library like 'file-type' or implement your own detection
        return undefined;
    }

    private calculateChecksum(buffer: Buffer): string {
        return createHash('sha256').update(buffer).digest('hex');
    }

    private async scanForMalware(buffer: Buffer): Promise<void> {
        // Implement your malware scanning logic here
        // This could integrate with an antivirus service or custom scanning logic
        logger.debug('Malware scan completed');
    }
}

// Export utility functions that might be useful elsewhere
export const isValidFileType = (mimeType: string, allowedTypes: string[]): boolean => {
    return allowedTypes.length === 0 || allowedTypes.includes(mimeType);
};

export const getFileExtension = (filename: string): string => {
    const ext = filename.split('.').pop();
    return ext ? `.${ext.toLowerCase()}` : '';
};

export const getMimeType = (filename: string): string => {
    return lookup(filename) || 'application/octet-stream';
};
==================================================

=== Document 12 ===
File: https://github.com/jluongg/qllm/blob/feature/local_parser/package.json
MIME Type: text/plain; charset=utf-8
Content Length: 2072
Content:
{
  "name": "qllm-monorepo",
  "version": "2.0.0",
  "private": true,
  "scripts": {
    "build": "pnpm run -r build",
    "test": "pnpm -r run test --passWithNoTests",
    "lint": "pnpm -r run lint",
    "format": "pnpm -r run format",
    "clean": "pnpm -r run clean",
    "install:local": "pnpm uninstall -g qllm && pnpm install -g ./packages/qllm-cli",
    "preinstall:local": "pnpm run build",
    "version": "changeset version",
    "publish-packages": "pnpm -r publish --access public",
    "prepublish-packages": "pnpm run build",
    "docs": "pnpm -r run docs",
    "changeset": "changeset",
    "tag": "git tag v$(node -p 'require(\"./package.json\").version') && git push origin v$(node -p 'require(\"./package.json\").version')",
    "publish-and-tag": "pnpm publish && git tag v$(node -p 'require(\"./package.json\").version') && git push origin v$(node -p 'require(\"./package.json\").version')"
  },
  "devDependencies": {
    "@aws-sdk/client-sso-oidc": "^3.614.0",
    "@babel/preset-env": "7.25.4",
    "@changesets/cli": "^2.27.7",
    "@rollup/plugin-commonjs": "26.0.1",
    "@rollup/plugin-json": "6.1.0",
    "@rollup/plugin-node-resolve": "15.2.3",
    "@rollup/plugin-terser": "0.4.4",
    "@rollup/plugin-typescript": "11.1.6",
    "babel-jest": "29.7.0",
    "eslint": "^9.9.1",
    "espree": "10.1.0",
    "prettier": "^3.3.3",
    "rimraf": "^6.0.1",
    "rollup": "4.21.1",
    "rollup-plugin-analyzer": "4.0.0",
    "rollup-plugin-gzip": "4.0.1",
    "ts-jest": "29.2.5",
    "typedoc": "0.26.7",
    "typedoc-plugin-markdown": "4.2.6",
    "typescript": "^5.5.4"
  },
  "engines": {
    "node": ">=16.5.0",
    "pnpm": ">=6.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/quantalogic/qllm.git"
  },
  "author": {
    "name": "QuantaLogic",
    "url": "https://quantalogic.app"
  },
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/quantalogic/qllm/issues"
  },
  "homepage": "https://github.com/quantalogic/qllm#readme",
  "dependencies": {
    "@aws-sdk/client-sts": "^3.621.0"
  }
}

==================================================

=== Document 13 ===
File: https://github.com/jluongg/qllm/blob/feature/local_parser/pnpm-workspace.yaml
MIME Type: text/plain; charset=utf-8
Content Length: 27
Content:

packages:
  - 'packages/*'
==================================================